# ✅ Importing BaseModel and Field from Pydantic
# BaseModel → allows you to define data models with validation and serialization automatically.
# Field → lets you set extra information or rules (like default values, aliases, descriptions, etc.) for each field.
from pydantic import BaseModel, Field

# ✅ Importing Optional from typing
# Optional[T] means this field can either hold a value of type T or be None.
# Example: Optional[str] means it can be a string or None.
from typing import Optional

# ✅ Importing PyObjectId from our custom utility
# PyObjectId is usually a helper class that converts MongoDB's ObjectId
# into a format that Pydantic can understand (since ObjectId isn’t JSON serializable by default).
from utils.objectid_util import PyObjectId


# ✅ Define the main User model class, inheriting from BaseModel
# BaseModel gives automatic validation, type-checking, and JSON conversion features.
class User(BaseModel):
    
    # ✅ `_id` is automatically generated by MongoDB,
    # so we only declare it as optional for reading (not for writing).
    # No need for default_factory — MongoDB handles it.
    id: Optional[PyObjectId] = Field(alias="_id")

    # ✅ Username of the user
    # Automatically validated as a string by Pydantic.
    username: str

    # ✅ Email field — stores user's email address
    email: str

    # ✅ Password field — for storing encrypted password (not plain text)
    password: str

    # ✅ Address field — stores user's address (could be home, office, etc.)
    address: str

    # ✅ Phone field — stores user's phone number
    phone: str

    
    # ✅ Configuration class for Pydantic behavior
    # The inner Config class customizes how Pydantic handles the model.
    class Config:
        # Allows using either "id" or "_id" when creating/reading
        allow_population_by_field_name = True
        # Converts ObjectId → str when returning JSON
        json_encoders = {PyObjectId: str}